{
  "stats": {
    "suites": 6,
    "tests": 67,
    "passes": 67,
    "pending": 0,
    "failures": 0,
    "start": "2023-12-03T07:22:21.166Z",
    "end": "2023-12-03T07:22:21.357Z",
    "duration": 191,
    "testsRegistered": 67,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f62eedf2-578a-4649-9fca-0fa26fc4d362",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8bce987f-2f1d-4125-a083-5431dceb674f",
          "title": "Cart Items Routes",
          "fullFile": "/Users/kirtan/Desktop/IT314_test/Main/backend-node/tests/cartitemtest.js",
          "file": "/cartitemtest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new cart item",
              "fullTitle": "Cart Items Routes should create a new cart item",
              "timedOut": false,
              "duration": 28,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/cart_items')\n  .send({\n    table_id: tableIdForTest,\n    menu_name: menuNameForTest,\n    quantity: 1,\n    item_price: 10,\n    total_price: 10,\n    item_profit: 5,\n    total_profit: 5,\n    date_time: new Date().toISOString(),\n  });\nexpect(response).to.have.status(201);\nexpect(response.body).to.have.property('message').to.equal('CartItem created successfully !!');",
              "err": {},
              "uuid": "d40a1f00-6ce3-4bcc-ae14-ed53a381a65c",
              "parentUUID": "8bce987f-2f1d-4125-a083-5431dceb674f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new cart item for different table id",
              "fullTitle": "Cart Items Routes should create a new cart item for different table id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/cart_items')\n  .send({\n    table_id: tableIdForTest2,\n    menu_name: menuNameForTest,\n    quantity: 1,\n    item_price: 10,\n    total_price: 10,\n    item_profit: 5,\n    total_profit: 5,\n    date_time: new Date().toISOString(),\n  });\nexpect(response).to.have.status(201);\nexpect(response.body).to.have.property('message').to.equal('CartItem created successfully !!');",
              "err": {},
              "uuid": "d3290a70-911c-4d71-bccc-8b2ba3143119",
              "parentUUID": "8bce987f-2f1d-4125-a083-5431dceb674f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new cart item",
              "fullTitle": "Cart Items Routes should create a new cart item",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/cart_items')\n  .send({\n    table_id: tableIdForTest,\n    menu_name: menuNameForTest2,\n    quantity: 1,\n    item_price: 10,\n    total_price: 10,\n    item_profit: 5,\n    total_profit: 5,\n    date_time: new Date().toISOString(),\n  });\nexpect(response).to.have.status(201);\nexpect(response.body).to.have.property('message').to.equal('CartItem created successfully !!');",
              "err": {},
              "uuid": "7ea20ed2-8f10-4011-aab2-aae64b931a80",
              "parentUUID": "8bce987f-2f1d-4125-a083-5431dceb674f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a cart item",
              "fullTitle": "Cart Items Routes should update a cart item",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put('/cart_items')\n  .send({\n    table_id: tableIdForTest,\n    menu_name: menuNameForTest,\n    quantity: 2,\n    total_price: 20,\n    total_profit: 10,\n    date_time: new Date().toISOString(),\n    item_price: 10,\n    item_profit: 5,\n  });\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Updated successfully !!');",
              "err": {},
              "uuid": "76eaa34a-d97c-4464-849c-1955dd8f4fea",
              "parentUUID": "8bce987f-2f1d-4125-a083-5431dceb674f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a cart item",
              "fullTitle": "Cart Items Routes should update a cart item",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put('/cart_items')\n  .send({\n    table_id: tableIdForTest,\n    menu_name: menuNameForTest,\n    quantity: 4,\n    item_price: 10,\n    item_profit: 5,\n    total_price: 40,\n    total_profit: 20,\n    date_time: new Date().toISOString(),\n  });\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Updated successfully !!');",
              "err": {},
              "uuid": "64d83884-080a-4e5d-a9e8-e32575dc6465",
              "parentUUID": "8bce987f-2f1d-4125-a083-5431dceb674f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a cart item",
              "fullTitle": "Cart Items Routes should update a cart item",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put('/cart_items')\n  .send({\n    table_id: tableIdForTest2,\n    menu_name: menuNameForTest,\n    quantity: 1,\n    total_price: 10,\n    total_profit: 5,\n    item_price: 10,\n    item_profit: 5,\n    date_time: new Date().toISOString(),\n  });\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Updated successfully !!');",
              "err": {},
              "uuid": "89a42b20-a562-4752-9af6-e0e075adae1d",
              "parentUUID": "8bce987f-2f1d-4125-a083-5431dceb674f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a particular menu item from cart",
              "fullTitle": "Cart Items Routes should delete a particular menu item from cart",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .delete(`/cart_items/${tableIdForTest}/${menuNameForTest}`);\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Deleted successfully !!');",
              "err": {},
              "uuid": "39b6f9a2-b89c-4382-b9a1-61faad4a8834",
              "parentUUID": "8bce987f-2f1d-4125-a083-5431dceb674f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a particular menu item from cart",
              "fullTitle": "Cart Items Routes should delete a particular menu item from cart",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .delete(`/cart_items/${tableIdForTest2}/${menuNameForTest}`);\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Deleted successfully !!');",
              "err": {},
              "uuid": "de4baf37-7799-41e9-b620-6d14fe82cb9e",
              "parentUUID": "8bce987f-2f1d-4125-a083-5431dceb674f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d40a1f00-6ce3-4bcc-ae14-ed53a381a65c",
            "d3290a70-911c-4d71-bccc-8b2ba3143119",
            "7ea20ed2-8f10-4011-aab2-aae64b931a80",
            "76eaa34a-d97c-4464-849c-1955dd8f4fea",
            "64d83884-080a-4e5d-a9e8-e32575dc6465",
            "89a42b20-a562-4752-9af6-e0e075adae1d",
            "39b6f9a2-b89c-4382-b9a1-61faad4a8834",
            "de4baf37-7799-41e9-b620-6d14fe82cb9e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 51,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6eb18d5a-a914-4d81-94c1-31f96bfe3f60",
          "title": "Cart Routes",
          "fullFile": "/Users/kirtan/Desktop/IT314_test/Main/backend-node/tests/carttest.js",
          "file": "/carttest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new cart",
              "fullTitle": "Cart Routes should create a new cart",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/cart')\n  .send({\n    table_id: tableIdForTest,\n    total_bill_amount: 50,\n    total_bill_profit: 20,\n    date_time: new Date().toISOString(),\n  });\nexpect(response).to.have.status(201);\nexpect(response.body).to.have.property('message').to.equal('Cart created successfully !!');",
              "err": {},
              "uuid": "55cb3e03-4622-40f2-bf99-71c284c86224",
              "parentUUID": "6eb18d5a-a914-4d81-94c1-31f96bfe3f60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new cart",
              "fullTitle": "Cart Routes should create a new cart",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/cart')\n  .send({\n    table_id: tableIdForTest2,\n    total_bill_amount: 100,\n    total_bill_profit: 40,\n    date_time: new Date().toISOString(),\n  });\nexpect(response).to.have.status(201);\nexpect(response.body).to.have.property('message').to.equal('Cart created successfully !!');",
              "err": {},
              "uuid": "5947d5a6-1020-4b81-8c1f-fe37890dbe37",
              "parentUUID": "6eb18d5a-a914-4d81-94c1-31f96bfe3f60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update cart based on table_id",
              "fullTitle": "Cart Routes should update cart based on table_id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/cart/${tableIdForTest}`)\n  .send({\n    total_bill_amount: 60,\n    total_bill_profit: 40,\n    date_time: new Date().toISOString(),\n  });\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Updated successfully !!');",
              "err": {},
              "uuid": "5f6faf68-0438-419c-a845-79fa55b382a3",
              "parentUUID": "6eb18d5a-a914-4d81-94c1-31f96bfe3f60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update cart based on table_id",
              "fullTitle": "Cart Routes should update cart based on table_id",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/cart/${tableIdForTest2}`)\n  .send({\n    total_bill_amount: 200,\n    total_bill_profit: 40,\n    date_time: new Date().toISOString(),\n  });\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Updated successfully !!');",
              "err": {},
              "uuid": "4f141278-3ee5-4a19-a2fd-37eabcf80679",
              "parentUUID": "6eb18d5a-a914-4d81-94c1-31f96bfe3f60",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete cart based on table_id",
              "fullTitle": "Cart Routes should delete cart based on table_id",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai.request(app).delete(`/cart/${tableIdForTest}`);\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Deleted successfully !!');",
              "err": {},
              "uuid": "dcca3b67-cd6e-4b4a-9454-8f54376ecaa1",
              "parentUUID": "6eb18d5a-a914-4d81-94c1-31f96bfe3f60",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "55cb3e03-4622-40f2-bf99-71c284c86224",
            "5947d5a6-1020-4b81-8c1f-fe37890dbe37",
            "5f6faf68-0438-419c-a845-79fa55b382a3",
            "4f141278-3ee5-4a19-a2fd-37eabcf80679",
            "dcca3b67-cd6e-4b4a-9454-8f54376ecaa1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "afde1a2b-c21c-4641-a63a-a28a868d6d8c",
          "title": "Category Routes",
          "fullFile": "/Users/kirtan/Desktop/IT314_test/Main/backend-node/tests/categorytest.js",
          "file": "/categorytest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new category",
              "fullTitle": "Category Routes should create a new category",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post(\"/category\")\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    categoryName: \"jamilojajo\",\n  });\nexpect(response).to.have.status(201);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Category created successfully !!\");",
              "err": {},
              "uuid": "48d8c4a1-2a4c-4d25-95ef-95fdfffb4914",
              "parentUUID": "afde1a2b-c21c-4641-a63a-a28a868d6d8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new category",
              "fullTitle": "Category Routes should create a new category",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post(\"/category\")\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    categoryName: \"Test Category second\",\n  });\nexpect(response).to.have.status(201);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Category created successfully !!\");",
              "err": {},
              "uuid": "14f2e5ff-06be-49d6-bb38-0ced4cbde514",
              "parentUUID": "afde1a2b-c21c-4641-a63a-a28a868d6d8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check if new category field is empty",
              "fullTitle": "Category Routes check if new category field is empty",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post(\"/category\")\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    categoryName: null,\n  });\nexpect(response).to.have.status(400);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"All fields are mandatory !!\");",
              "err": {},
              "uuid": "53e1145c-139e-4732-9089-e1f329ab4f99",
              "parentUUID": "afde1a2b-c21c-4641-a63a-a28a868d6d8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a category ",
              "fullTitle": "Category Routes should update a category ",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/category/${categoryIdForTest}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    categoryName: \"Updated Test Category\",\n  });\nexpect(response).to.have.status(200);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Updated successfully !!\");",
              "err": {},
              "uuid": "062ba8c4-8427-4309-a15d-a58a4b83cbef",
              "parentUUID": "afde1a2b-c21c-4641-a63a-a28a868d6d8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should give error when new category name is blank while updating a category ",
              "fullTitle": "Category Routes should give error when new category name is blank while updating a category ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/category/${categoryIdForTest}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    categoryName: null,\n  });\nexpect(response).to.have.status(400);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"All fields are mandatory !!\");",
              "err": {},
              "uuid": "f98d3245-75c8-42e4-be2a-920937eb9b03",
              "parentUUID": "afde1a2b-c21c-4641-a63a-a28a868d6d8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a category",
              "fullTitle": "Category Routes should delete a category",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .delete(`/category/${categoryIdForTest}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`);\nexpect(response).to.have.status(200);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Deleted successfully !!\");",
              "err": {},
              "uuid": "feb54d0d-42f6-4d64-8a4b-78747b46197e",
              "parentUUID": "afde1a2b-c21c-4641-a63a-a28a868d6d8c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "48d8c4a1-2a4c-4d25-95ef-95fdfffb4914",
            "14f2e5ff-06be-49d6-bb38-0ced4cbde514",
            "53e1145c-139e-4732-9089-e1f329ab4f99",
            "062ba8c4-8427-4309-a15d-a58a4b83cbef",
            "f98d3245-75c8-42e4-be2a-920937eb9b03",
            "feb54d0d-42f6-4d64-8a4b-78747b46197e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "86442c64-2e9f-40c1-963d-38577eebe9f0",
          "title": "Feedback Routes",
          "fullFile": "/Users/kirtan/Desktop/IT314_test/Main/backend-node/tests/feedbacktest.js",
          "file": "/feedbacktest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new feedback",
              "fullTitle": "Feedback Routes should create a new feedback",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/feedback')\n  .send({\n    starRate: 5,\n    comments: 'Test comment',\n    date_time: '2023-11-24T12:00:00Z',\n  });\nexpect(response).to.have.status(201);\nexpect(response.body).to.have.property('message').to.equal('Feedback created successfully !!');",
              "err": {},
              "uuid": "e3e17123-c795-464a-9cd0-ba4062a79027",
              "parentUUID": "86442c64-2e9f-40c1-963d-38577eebe9f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new feedback",
              "fullTitle": "Feedback Routes should create a new feedback",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/feedback')\n  .send({\n    starRate: 5,\n    comments: 'Test comment',\n    date_time: '2023-11-25T12:20:05Z',\n  });\nexpect(response).to.have.status(201);\nexpect(response.body).to.have.property('message').to.equal('Feedback created successfully !!');",
              "err": {},
              "uuid": "0e72550d-c442-43f6-b276-c271a578b8a1",
              "parentUUID": "86442c64-2e9f-40c1-963d-38577eebe9f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new feedback",
              "fullTitle": "Feedback Routes should create a new feedback",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/feedback')\n  .send({\n    starRate: 5,\n    comments: 'Test comment',\n    date_time: '2023-11-26T11:11:17Z',\n  });\nexpect(response).to.have.status(201);\nexpect(response.body).to.have.property('message').to.equal('Feedback created successfully !!');",
              "err": {},
              "uuid": "32d777ef-8c6d-4fb5-bd6e-7dadff4679c3",
              "parentUUID": "86442c64-2e9f-40c1-963d-38577eebe9f0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Feedback is empty",
              "fullTitle": "Feedback Routes Feedback is empty",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/feedback')\n  .send({\n    starRate: null,\n    comments: null,\n    date_time:'2023-11-24T12:00:00Z',\n  });\n  expect(response).to.have.status(201);\n  expect(response.body).to.have.property('message').to.equal('Feedback created successfully !!');",
              "err": {},
              "uuid": "c809bc95-52e1-4036-81e1-5f3649337980",
              "parentUUID": "86442c64-2e9f-40c1-963d-38577eebe9f0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e3e17123-c795-464a-9cd0-ba4062a79027",
            "0e72550d-c442-43f6-b276-c271a578b8a1",
            "32d777ef-8c6d-4fb5-bd6e-7dadff4679c3",
            "c809bc95-52e1-4036-81e1-5f3649337980"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
          "title": "Restaurant Menu Routes",
          "fullFile": "/Users/kirtan/Desktop/IT314_test/Main/backend-node/tests/restaurantmenutest.js",
          "file": "/restaurantmenutest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new menu item",
              "fullTitle": "Restaurant Menu Routes should create a new menu item",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/menu')\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: 'Test Menu Item',\n    description: 'Test description',\n    price: 10,\n    profit: 5,\n    img: 'test_image_url',\n  });\nexpect(response).to.have.status(201);\nexpect(response.body).to.have.property('message').to.equal('MenuItem created successfully !!');",
              "err": {},
              "uuid": "b15280a9-d2ce-4025-818c-ea1402102ad7",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "menu item name already exists.",
              "fullTitle": "Restaurant Menu Routes menu item name already exists.",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/menu')\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: 'Test Menu Item',\n    description: 'Test description',\n    price: 10,\n    profit: 5,\n    img: 'test_image_url',\n  });\nexpect(response).to.have.status(500);\nexpect(response.body).to.have.property('message').to.equal(`Can't create a new menuItem!!`);",
              "err": {},
              "uuid": "30c410d8-5d90-4e0d-ad31-fccb8bd1eddc",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new menu item",
              "fullTitle": "Restaurant Menu Routes should create a new menu item",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/menu')\n  .send({\n    categoryName: 'Beverages',\n    menu_name: 'Test Menu Item second',\n    description: 'Test description dummy',\n    price: 100,\n    profit: 50,\n    img: 'test_image_url_2',\n  });\nexpect(response).to.have.status(201);\nexpect(response.body).to.have.property('message').to.equal('MenuItem created successfully !!');",
              "err": {},
              "uuid": "1c1f0615-96e6-4730-9ffc-6e0a4dd52208",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create menuItem as categoryName is NULL ",
              "fullTitle": "Restaurant Menu Routes should not create menuItem as categoryName is NULL ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/menu')\n  .send({\n    categoryName: null,\n    menu_name: 'Test Menu Item',\n    description: 'Test description',\n    price: 10,\n    profit: 5,\n    img: 'test_image_url',\n  });\nexpect(response).to.have.status(400);\nexpect(response.body).to.have.property('message').to.equal('All fields are mandatory !!');",
              "err": {},
              "uuid": "9340aaba-616d-448c-95b2-e8269d060e7d",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create menuItem as menu_name is NULL ",
              "fullTitle": "Restaurant Menu Routes should not create menuItem as menu_name is NULL ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/menu')\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: null,\n    description: 'Test description',\n    price: 10,\n    profit: 5,\n    img: 'test_image_url',\n  });\nexpect(response).to.have.status(400);\nexpect(response.body).to.have.property('message').to.equal('All fields are mandatory !!');",
              "err": {},
              "uuid": "c3516ee9-0664-402f-a576-1fa1545a539e",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create menuItem as price is NULL ",
              "fullTitle": "Restaurant Menu Routes should not create menuItem as price is NULL ",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/menu')\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: 'Test Menu Item',\n    description: 'Test description',\n    price: null,\n    profit: 5,\n    img: 'test_image_url',\n  });\nexpect(response).to.have.status(400);\nexpect(response.body).to.have.property('message').to.equal('All fields are mandatory !!');",
              "err": {},
              "uuid": "8c94d158-5fff-4aa8-b9d3-4249f372b93c",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create menuItem as profit is NULL ",
              "fullTitle": "Restaurant Menu Routes should not create menuItem as profit is NULL ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/menu')\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: 'Test Menu Item',\n    description: 'Test description',\n    price: 10,\n    profit: null,\n    img: 'test_image_url',\n  });\nexpect(response).to.have.status(400);\nexpect(response.body).to.have.property('message').to.equal('All fields are mandatory !!');",
              "err": {},
              "uuid": "63dc646b-dd44-4a60-af1f-d81deda49fcc",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not create menuItem as image is NULL ",
              "fullTitle": "Restaurant Menu Routes should not create menuItem as image is NULL ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post('/menu')\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: 'Test Menu Item',\n    description: 'Test description',\n    price: 10,\n    profit: 5,\n    img: null,\n  });\nexpect(response).to.have.status(400);\nexpect(response.body).to.have.property('message').to.equal('All fields are mandatory !!');",
              "err": {},
              "uuid": "e7177741-9e57-4720-b85f-6c9002fa6e9e",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update a image in menu item",
              "fullTitle": "Restaurant Menu Routes should update a image in menu item",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/menu/${menuItemIdForTest}`)\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: 'khk',\n    description: 'Test description',\n    price: 10,\n    profit: 5,\n    img: 'updated_test_image_url',\n  });\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Updated successfully !!');",
              "err": {},
              "uuid": "a9801cc6-44ca-48cb-ba84-ce7c217f87eb",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update profit menu item ",
              "fullTitle": "Restaurant Menu Routes should update profit menu item ",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/menu/${menuItemIdForTest}`)\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: 'khk',\n    description: 'Test description',\n    price: 10,\n    profit: 8,\n    img: 'updated_test_image_url',\n  });\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Updated successfully !!');",
              "err": {},
              "uuid": "161efcd8-85f6-46f2-a209-e49086ff701c",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update price menu item ",
              "fullTitle": "Restaurant Menu Routes should update price menu item ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/menu/${menuItemIdForTest}`)\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: 'khk',\n    description: 'Test description',\n    price: 20,\n    profit: 8,\n    img: 'updated_test_image_url',\n  });\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Updated successfully !!');",
              "err": {},
              "uuid": "23c7fb77-722d-4bdb-a13f-618492caae26",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update description menu item ",
              "fullTitle": "Restaurant Menu Routes should update description menu item ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/menu/${menuItemIdForTest}`)\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: 'khk',\n    description: 'Updated Test description',\n    price: 20,\n    profit: 8,\n    img: 'updated_test_image_url',\n  });\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Updated successfully !!');",
              "err": {},
              "uuid": "96585125-5f06-44d6-ad17-0c2ab712cf9c",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update menu name in  menu item ",
              "fullTitle": "Restaurant Menu Routes should update menu name in  menu item ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/menu/${menuItemIdForTest}`)\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: 'UPDATED Test Menu Item',\n    description: 'Updated Test description',\n    price: 20,\n    profit: 8,\n    img: 'updated_test_image_url',\n  });\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Updated successfully !!');",
              "err": {},
              "uuid": "f5781421-0cdb-4631-8453-c64fc85c69eb",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update category name in menu item ",
              "fullTitle": "Restaurant Menu Routes should update category name in menu item ",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/menu/${menuItemIdForTest}`)\n  .send({\n    categoryName: 'Mocktails',\n    menu_name: 'UPDATED Test Menu Item',\n    description: 'Updated Test description',\n    price: 20,\n    profit: 8,\n    img: 'updated_test_image_url',\n  });\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Updated successfully !!');",
              "err": {},
              "uuid": "1d8e8356-ae68-4b60-b7cb-857302e157d5",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "new menu name is already there.",
              "fullTitle": "Restaurant Menu Routes new menu name is already there.",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/menu/${menuItemIdForTest}`)\n  .send({\n    categoryName: 'Bevarages',\n    menu_name: 'UPDATED Test Menu Item',\n    description: 'Updated Test description',\n    price: 20,\n    profit: 8,\n    img: 'updated_test_image_url',\n  });\nexpect(response).to.have.status(500);\nexpect(response.body).to.have.property('message').to.equal(`Can't update !!`);",
              "err": {},
              "uuid": "10c991ca-5804-43b5-b21a-7b4a080db348",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Category Name is empty while updating",
              "fullTitle": "Restaurant Menu Routes Category Name is empty while updating",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/menu/${menuItemIdForTest}`)\n  .send({\n    categoryName: null,\n    menu_name: 'Updated Test Menu Item',\n    description: 'Updated test description',\n    price: 15,\n    profit: 8,\n    img: 'updated_test_image_url',\n  });\nexpect(response).to.have.status(400);\nexpect(response.body).to.have.property('message').to.equal('All fields are mandatory !!');",
              "err": {},
              "uuid": "9ee16090-8fb7-4e31-92a0-35db5ee38817",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Menu name is empty while updating",
              "fullTitle": "Restaurant Menu Routes Menu name is empty while updating",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/menu/${menuItemIdForTest}`)\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: null,\n    description: 'Updated test description',\n    price: 15,\n    profit: 8,\n    img: 'updated_test_image_url',\n  });\nexpect(response).to.have.status(400);\nexpect(response.body).to.have.property('message').to.equal('All fields are mandatory !!');",
              "err": {},
              "uuid": "744f2cf2-c756-4b4f-acfa-ce7dd262c86c",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "price field is empty while updating",
              "fullTitle": "Restaurant Menu Routes price field is empty while updating",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/menu/${menuItemIdForTest}`)\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: 'Updated Test Menu Item',\n    description: 'Updated test description',\n    price: null,\n    profit: 8,\n    img: 'updated_test_image_url',\n  });\nexpect(response).to.have.status(400);\nexpect(response.body).to.have.property('message').to.equal('All fields are mandatory !!');",
              "err": {},
              "uuid": "16c16dc6-d31d-4cac-8046-eaf0500bc374",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "profit field is empty while updating",
              "fullTitle": "Restaurant Menu Routes profit field is empty while updating",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/menu/${menuItemIdForTest}`)\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: 'Updated Test Menu Item',\n    description: 'Updated test description',\n    price: 10,\n    profit: null,\n    img: 'updated_test_image_url',\n  });\nexpect(response).to.have.status(400);\nexpect(response.body).to.have.property('message').to.equal('All fields are mandatory !!');",
              "err": {},
              "uuid": "5c68d2b9-9772-401f-b81e-c98435fcb484",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "image field is empty while updating",
              "fullTitle": "Restaurant Menu Routes image field is empty while updating",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/menu/${menuItemIdForTest}`)\n  .send({\n    categoryName: 'Appetizer',\n    menu_name: 'Updated Test Menu Item',\n    description: 'Updated test description',\n    price: 10,\n    profit: 8,\n    img: null,\n  });\nexpect(response).to.have.status(400);\nexpect(response.body).to.have.property('message').to.equal('All fields are mandatory !!');",
              "err": {},
              "uuid": "aa5e7adc-ca7b-44e3-8ee5-c1167b110736",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a menu item based on ID",
              "fullTitle": "Restaurant Menu Routes should delete a menu item based on ID",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai.request(app).delete(`/menu/${menuItemIdForTest}`);\nexpect(response).to.have.status(200);\nexpect(response.body).to.have.property('message').to.equal('Deleted successfully !!');",
              "err": {},
              "uuid": "094f954a-7a87-4560-bc2a-a02a2bdfd962",
              "parentUUID": "5d8c66f4-a5f0-4e90-90d1-1b7b326eb51b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b15280a9-d2ce-4025-818c-ea1402102ad7",
            "30c410d8-5d90-4e0d-ad31-fccb8bd1eddc",
            "1c1f0615-96e6-4730-9ffc-6e0a4dd52208",
            "9340aaba-616d-448c-95b2-e8269d060e7d",
            "c3516ee9-0664-402f-a576-1fa1545a539e",
            "8c94d158-5fff-4aa8-b9d3-4249f372b93c",
            "63dc646b-dd44-4a60-af1f-d81deda49fcc",
            "e7177741-9e57-4720-b85f-6c9002fa6e9e",
            "a9801cc6-44ca-48cb-ba84-ce7c217f87eb",
            "161efcd8-85f6-46f2-a209-e49086ff701c",
            "23c7fb77-722d-4bdb-a13f-618492caae26",
            "96585125-5f06-44d6-ad17-0c2ab712cf9c",
            "f5781421-0cdb-4631-8453-c64fc85c69eb",
            "1d8e8356-ae68-4b60-b7cb-857302e157d5",
            "10c991ca-5804-43b5-b21a-7b4a080db348",
            "9ee16090-8fb7-4e31-92a0-35db5ee38817",
            "744f2cf2-c756-4b4f-acfa-ce7dd262c86c",
            "16c16dc6-d31d-4cac-8046-eaf0500bc374",
            "5c68d2b9-9772-401f-b81e-c98435fcb484",
            "aa5e7adc-ca7b-44e3-8ee5-c1167b110736",
            "094f954a-7a87-4560-bc2a-a02a2bdfd962"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 40,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6e6bd901-8085-4060-9882-4e4ee467979c",
          "title": "Table Routes",
          "fullFile": "/Users/kirtan/Desktop/IT314_test/Main/backend-node/tests/tabletest.js",
          "file": "/tabletest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a new table",
              "fullTitle": "Table Routes should create a new table",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post(\"/table\")\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 71,\n    capacity: 4,\n    availability_status: \"Available\",\n  });\nexpect(response).to.have.status(201);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Table created successfully !!\");",
              "err": {},
              "uuid": "c9d27b69-24af-4a9b-99e7-8ed5d3c62100",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new table",
              "fullTitle": "Table Routes should create a new table",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post(\"/table\")\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 72,\n    capacity: 5,\n    availability_status: \"Available\",\n  });\nexpect(response).to.have.status(201);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Table created successfully !!\");",
              "err": {},
              "uuid": "f474b16c-6ff9-4c2e-a22f-dfc15be7e0b6",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new table",
              "fullTitle": "Table Routes should create a new table",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post(\"/table\")\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 73,\n    capacity: 2,\n    availability_status: \"Occupied\",\n  });\nexpect(response).to.have.status(201);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Table created successfully !!\");",
              "err": {},
              "uuid": "f514ed74-521e-4cfa-8b37-0f79a6da7b2d",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new table",
              "fullTitle": "Table Routes should create a new table",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post(\"/table\")\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 74,\n    capacity: 10,\n    availability_status: \"Available\",\n  });\nexpect(response).to.have.status(201);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Table created successfully !!\");",
              "err": {},
              "uuid": "89a12a7a-2384-4971-b14e-6be63b51b63d",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "table id already exists",
              "fullTitle": "Table Routes table id already exists",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post(\"/table\")\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 72,\n    capacity: 4,\n    availability_status: \"Occupied\",\n  });\nexpect(response).to.have.status(500);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(`Can't create a new Table!!`);",
              "err": {},
              "uuid": "8918f770-eef7-4095-bf0b-b7e1ec2e7508",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "table id already exists",
              "fullTitle": "Table Routes table id already exists",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post(\"/table\")\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 74,\n    capacity: 5,\n    availability_status: \"Available\",\n  });\nexpect(response).to.have.status(500);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(`Can't create a new Table!!`);",
              "err": {},
              "uuid": "ebfd18cd-d4e6-47b0-b8e6-43bbd0739612",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "table id is null",
              "fullTitle": "Table Routes table id is null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post(\"/table\")\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: null,\n    capacity: 4,\n    availability_status: \"Occupied\",\n  });\nexpect(response).to.have.status(400);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(`All fields are mandatory !!`);",
              "err": {},
              "uuid": "b9feb2a2-cdbc-4e56-a3eb-c40ab75f01b7",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "capacity is null",
              "fullTitle": "Table Routes capacity is null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post(\"/table\")\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 91,\n    capacity: null,\n    availability_status: \"Occupied\",\n  });\nexpect(response).to.have.status(400);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(`All fields are mandatory !!`);",
              "err": {},
              "uuid": "4485fb77-5569-4816-af83-8cae3d167593",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "availability status is null",
              "fullTitle": "Table Routes availability status is null",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .post(\"/table\")\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 91,\n    capacity: 5,\n    availability_status: null,\n  });\nexpect(response).to.have.status(400);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(`All fields are mandatory !!`);",
              "err": {},
              "uuid": "333d2266-7020-4122-845f-000e46c81ecf",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update capacity",
              "fullTitle": "Table Routes should update capacity",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/table/${72}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 72,\n    capacity: 8,\n    availability_status: \"Available\",\n  });\nexpect(response).to.have.status(200);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Updated successfully !!\");",
              "err": {},
              "uuid": "fecf27f9-b0ea-40d7-9d8d-3b716df475f2",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update capacity",
              "fullTitle": "Table Routes should update capacity",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/table/${74}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 74,\n    capacity: 13,\n    availability_status: \"Available\",\n  });\nexpect(response).to.have.status(200);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Updated successfully !!\");",
              "err": {},
              "uuid": "ff45bc7e-b85d-4485-a1a2-3025131d27be",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update availability status",
              "fullTitle": "Table Routes should update availability status",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/table/${71}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 71,\n    capacity: 4,\n    availability_status: \"Occupied\",\n  });\nexpect(response).to.have.status(200);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Updated successfully !!\");",
              "err": {},
              "uuid": "575264c6-90ed-4a26-ad01-33f49d8b439f",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update availability status",
              "fullTitle": "Table Routes should update availability status",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/table/${73}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 73,\n    capacity: 2,\n    availability_status: \"Available\",\n  });\nexpect(response).to.have.status(200);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Updated successfully !!\");",
              "err": {},
              "uuid": "2ac3ad08-e267-4f18-8403-e7873fd2fd60",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update tableId",
              "fullTitle": "Table Routes should update tableId",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/table/${71}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 81,\n    capacity: 4,\n    availability_status: \"Available\",\n  });\nexpect(response).to.have.status(200);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Updated successfully !!\");",
              "err": {},
              "uuid": "54dd45e3-04c4-4ef3-b410-c20d1cc3faa5",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update tableId",
              "fullTitle": "Table Routes should update tableId",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/table/${72}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 82,\n    capacity: 4,\n    availability_status: \"Available\",\n  });\nexpect(response).to.have.status(200);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Updated successfully !!\");",
              "err": {},
              "uuid": "29aec332-b6b6-40b0-a37a-6cb7e46e84d0",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "New table id already exists while editing table details",
              "fullTitle": "Table Routes New table id already exists while editing table details",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/table/${82}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 81,\n    capacity: 6,\n    availability_status: \"Occupied\",\n  });\nexpect(response).to.have.status(500);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(`Can't update !!`);",
              "err": {},
              "uuid": "331e7ba4-b5a1-408d-8f2c-8a4414b80e27",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Table id is null during edit table by admin",
              "fullTitle": "Table Routes Table id is null during edit table by admin",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/table/${82}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: null,\n    capacity: 6,\n    availability_status: \"Occupied\",\n  });\nexpect(response).to.have.status(400);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"All fields are mandatory !!\");",
              "err": {},
              "uuid": "eff1f4df-6d30-4de1-9031-3fe2cb6671f7",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Capacity is null during edit table by admin",
              "fullTitle": "Table Routes Capacity is null during edit table by admin",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/table/${81}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 91,\n    capacity: null,\n    availability_status: \"Occupied\",\n  });\nexpect(response).to.have.status(400);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"All fields are mandatory !!\");",
              "err": {},
              "uuid": "d3d8e73e-e714-4e6a-9748-7ab5d9b5192c",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Availability status is null during edit table by admin",
              "fullTitle": "Table Routes Availability status is null during edit table by admin",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .put(`/table/${81}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`)\n  .send({\n    table_id: 91,\n    capacity: 4,\n    availability_status: null,\n  });\nexpect(response).to.have.status(400);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"All fields are mandatory !!\");",
              "err": {},
              "uuid": "cd569853-ce92-4a3a-b3aa-efaea3ab490e",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a table based on ID",
              "fullTitle": "Table Routes should delete a table based on ID",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .delete(`/table/${81}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`);\nexpect(response).to.have.status(200);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Deleted successfully !!\");",
              "err": {},
              "uuid": "6f4d6021-34ee-4b65-a3c2-b855e6fa6529",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a table based on ID",
              "fullTitle": "Table Routes should delete a table based on ID",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .delete(`/table/${82}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`);\nexpect(response).to.have.status(200);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Deleted successfully !!\");",
              "err": {},
              "uuid": "25e14fe7-ba8a-4064-985c-7b76ddb22f44",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a table based on ID",
              "fullTitle": "Table Routes should delete a table based on ID",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .delete(`/table/${73}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`);\nexpect(response).to.have.status(200);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Deleted successfully !!\");",
              "err": {},
              "uuid": "82691eb5-d09a-46de-a422-8cd4e245ae71",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a table based on ID",
              "fullTitle": "Table Routes should delete a table based on ID",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await chai\n  .request(app)\n  .delete(`/table/${74}`)\n  .set(\"Authorization\", `Bearer ${validAccessToken}`);\nexpect(response).to.have.status(200);\nexpect(response.body)\n  .to.have.property(\"message\")\n  .to.equal(\"Deleted successfully !!\");",
              "err": {},
              "uuid": "e98f38c6-3f09-496f-855c-85ffa0d73799",
              "parentUUID": "6e6bd901-8085-4060-9882-4e4ee467979c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c9d27b69-24af-4a9b-99e7-8ed5d3c62100",
            "f474b16c-6ff9-4c2e-a22f-dfc15be7e0b6",
            "f514ed74-521e-4cfa-8b37-0f79a6da7b2d",
            "89a12a7a-2384-4971-b14e-6be63b51b63d",
            "8918f770-eef7-4095-bf0b-b7e1ec2e7508",
            "ebfd18cd-d4e6-47b0-b8e6-43bbd0739612",
            "b9feb2a2-cdbc-4e56-a3eb-c40ab75f01b7",
            "4485fb77-5569-4816-af83-8cae3d167593",
            "333d2266-7020-4122-845f-000e46c81ecf",
            "fecf27f9-b0ea-40d7-9d8d-3b716df475f2",
            "ff45bc7e-b85d-4485-a1a2-3025131d27be",
            "575264c6-90ed-4a26-ad01-33f49d8b439f",
            "2ac3ad08-e267-4f18-8403-e7873fd2fd60",
            "54dd45e3-04c4-4ef3-b410-c20d1cc3faa5",
            "29aec332-b6b6-40b0-a37a-6cb7e46e84d0",
            "331e7ba4-b5a1-408d-8f2c-8a4414b80e27",
            "eff1f4df-6d30-4de1-9031-3fe2cb6671f7",
            "d3d8e73e-e714-4e6a-9748-7ab5d9b5192c",
            "cd569853-ce92-4a3a-b3aa-efaea3ab490e",
            "6f4d6021-34ee-4b65-a3c2-b855e6fa6529",
            "25e14fe7-ba8a-4064-985c-7b76ddb22f44",
            "82691eb5-d09a-46de-a422-8cd4e245ae71",
            "e98f38c6-3f09-496f-855c-85ffa0d73799"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 59,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}